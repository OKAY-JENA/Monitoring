extensions:
	pd.monitoring: Pd\Monitoring\DI\Extension
	dbal: Nextras\Dbal\Bridges\NetteDI\DbalExtension
	orm: Nextras\Orm\Bridges\NetteDI\OrmExtension
	migrations: Nextras\Migrations\Bridges\NetteDI\MigrationsExtension
	console: Kdyby\Console\DI\ConsoleExtension
	pd.monolog: \Pd\MonologModule\DI\Extension
	rabbitmq: Kdyby\RabbitMq\DI\RabbitMqExtension
	nextras.form: Nextras\Forms\Bridges\NetteDI\FormsExtension
	clock: \Kdyby\Clock\DI\ClockExtension


orm:
	model: Pd\Monitoring\Orm\Orm


dbal:
	driver: mysqli


migrations:
	dir: %appDir%/../migrations
	driver: mysql
	dbal: nextras


pd.monolog:
	name: "pecka-monitoring"


clock:
	provider: current


parameters:
	logDir: %appDir%/../log
	github:
		scope:
			- user:email
			- read:org
	elasticsearch:
		hosts:
			- 'localhost'


application:
	errorPresenter: Error
	scanDirs: off
	mapping:
		*: Pd\Monitoring\*\Presenters\*Presenter


rabbitmq:
	connection:
#		host: %rabbitmq.host%
#		port: %rabbitmq.port%
#		user: %rabbitmq.user%
#		password: %rabbitmq.password%
#		vhost: %rabbitmq.vhost%
	producers:
		aliveCheck:
			exchange: {name: 'aliveCheck', type: direct}
			contentType: text/plain
		aliveCheckSiteMap:
			exchange: {name: 'aliveCheckSiteMap', type: direct}
			contentType: text/plain
		dnsCheck:
			exchange: {name: 'dnsCheck', type: direct}
			contentType: text/plain
		certificateCheck:
			exchange: {name: 'certificateCheck', type: direct}
			contentType: text/plain
		httpStatusCodeCheck:
			exchange: {name: 'httpStatusCodeCheck', type: direct}
			contentType: text/plain
		feedCheck:
			exchange: {name: 'feedCheck', type: direct}
			contentType: text/plain
		rabbitConsumerCheck:
			exchange: {name: 'rabbitConsumerCheck', type: direct}
			contentType: text/plain
		rabbitQueueCheck:
			exchange: {name: 'rabbitQueueCheck', type: direct}
			contentType: text/plain
		numberValueCheck:
			exchange: {name: 'numberValueCheck', type: direct}
			contentType: text/plain
		errorsCheck:
			exchange: {name: 'errorsCheck', type: direct}
			contentType: text/plain
		xpathCheck:
			exchange: {name: 'xpathCheck', type: direct}
			contentType: text/plain
		xpathCheckSiteMap:
			exchange: {name: 'xpathCheckSiteMap', type: direct}
			contentType: text/plain
		elasticsearchExport:
			exchange: {name: 'elasticsearchExport', type: direct}
			contentType: text/plain

	consumers:
		aliveCheck:
			exchange: {name: 'aliveCheck', type: direct}
			queue: {name: 'aliveCheck'}
			callback: [@Pd\Monitoring\Check\Consumers\AliveCheck, process]
			qos:
				prefetchCount: 10
		aliveCheckSiteMap:
			exchange: {name: 'aliveCheckSiteMap', type: direct}
			queue: {name: 'aliveCheckSiteMap'}
			callback: [@\Pd\Monitoring\Check\Consumers\AliveCheck, process]
			qos:
				prefetchCount: 1
		dnsCheck:
			exchange: {name: 'dnsCheck', type: direct}
			queue: {name: 'dnsCheck'}
			callback: [@Pd\Monitoring\Check\Consumers\DnsCheck, process]
			qos:
				prefetchCount: 10
		certificateCheck:
			exchange: {name: 'certificateCheck', type: direct}
			queue: {name: 'certificateCheck'}
			callback: [@Pd\Monitoring\Check\Consumers\CertificateCheck, process]
			qos:
				prefetchCount: 10
		httpStatusCodeCheck:
			exchange: {name: 'httpStatusCodeCheck', type: direct}
			queue: {name: 'httpStatusCodeCheck'}
			callback: [@Pd\Monitoring\Check\Consumers\HttpStatusCodeCheck, process]
			qos:
				prefetchCount: 10
		feedCheck:
			exchange: {name: 'feedCheck', type: direct}
			queue: {name: 'feedCheck'}
			callback: [@Pd\Monitoring\Check\Consumers\FeedCheck, process]
			qos:
				prefetchCount: 10
		rabbitConsumerCheck:
			exchange: {name: 'rabbitConsumerCheck', type: direct}
			queue: {name: 'rabbitConsumerCheck'}
			callback: [@Pd\Monitoring\Check\Consumers\RabbitConsumerCheck, process]
			qos:
				prefetchCount: 10
		rabbitQueueCheck:
			exchange: {name: 'rabbitQueueCheck', type: direct}
			queue: {name: 'rabbitQueueCheck'}
			callback: [@Pd\Monitoring\Check\Consumers\RabbitQueueCheck, process]
			qos:
				prefetchCount: 10
		numberValueCheck:
			exchange: {name: 'numberValueCheck', type: direct}
			queue: {name: 'numberValueCheck'}
			callback: [@Pd\Monitoring\Check\Consumers\NumberValueCheck, process]
			qos:
				prefetchCount: 10
		errorsCheck:
			exchange: {name: 'errorsCheck', type: direct}
			queue: {name: 'errorsCheck'}
			callback: [@Pd\Monitoring\Check\Consumers\ErrorsCheck, process]
			qos:
				prefetchCount: 10
		xpathCheck:
			exchange: {name: 'xpathCheck', type: direct}
			queue: {name: 'xpathCheck'}
			callback: [@\Pd\Monitoring\Check\Consumers\XpathCheck, process]
			qos:
				prefetchCount: 10
		xpathCheckSiteMap:
			exchange: {name: 'xpathCheckSiteMap', type: direct}
			queue: {name: 'xpathCheckSiteMap'}
			callback: [@\Pd\Monitoring\Check\Consumers\XpathCheck, process]
			qos:
				prefetchCount: 1
		elasticsearchExport:
			exchange: {name: 'elasticsearchExport', type: direct}
			queue: {name: 'elasticsearchExport'}
			callback: [@\Pd\Monitoring\Elasticsearch\Consumers\ChecksExporter, process]
			qos:
				prefetchCount: 10


services:
	routerFactory:
		class: Pd\Monitoring\Router\RouterFactory

	router: @routerFactory::createRouter

	-
		implement: Pd\Monitoring\DashBoard\Controls\Logout\IFactory

	-
		implement: Pd\Monitoring\DashBoard\Controls\Project\IFactory

	-
		class: Pd\Monitoring\DashBoard\Forms\Factory

	-
		implement: Pd\Monitoring\DashBoard\Controls\Check\IFactory
		arguments:
			user: @\Nette\Security\User::getIdentity()

	-
		class: Pd\Monitoring\DashBoard\Controls\AddEditCheck\Factory

	-
		class: Pd\Monitoring\Check\Consumers\AliveCheck

	-
		class: Pd\Monitoring\Check\Consumers\DnsCheck

	-
		class: Pd\Monitoring\Check\Consumers\CertificateCheck

	-
		class: Pd\Monitoring\Check\Consumers\FeedCheck

	-
		class: Pd\Monitoring\Check\Consumers\RabbitConsumerCheck

	-
		class: Pd\Monitoring\Check\Consumers\RabbitQueueCheck

	-
		class: Pd\Monitoring\Check\Consumers\HttpStatusCodeCheck

	-
		class: Pd\Monitoring\Check\Consumers\NumberValueCheck

	-
		factory: \Pd\Monitoring\Check\Consumers\ErrorsCheck

	-
		factory: \Pd\Monitoring\Check\Consumers\XpathCheck

	-
		class: Pd\Monitoring\User\AclFactory

	-
		factory: @Pd\Monitoring\User\AclFactory::create

	-
		class: Pd\Monitoring\DashBoard\Presenters\LoginPresenter

	-
		class: Pd\Monitoring\Check\Commands\Publish\AliveChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @Kdyby\RabbitMq\Connection::getProducer('aliveCheck')

	-
		class: Pd\Monitoring\Check\Commands\Publish\AliveChecksSiteMapCommand
		tags:
			- kdyby.console.command
		arguments:
			- @\Kdyby\RabbitMq\Connection::getProducer('aliveCheckSiteMap')

	-
		class: Pd\Monitoring\Check\Commands\Publish\DnsChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @Kdyby\RabbitMq\Connection::getProducer('dnsCheck')

	-
		class: Pd\Monitoring\Check\Commands\Publish\CertificateChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @Kdyby\RabbitMq\Connection::getProducer('certificateCheck')

	-
		class: Pd\Monitoring\Check\Commands\Publish\FeedChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @Kdyby\RabbitMq\Connection::getProducer('feedCheck')

	-
		class: Pd\Monitoring\Check\Commands\Publish\RabbitConsumerChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @Kdyby\RabbitMq\Connection::getProducer('rabbitConsumerCheck')

	-
		class: Pd\Monitoring\Check\Commands\Publish\RabbitQueueChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @Kdyby\RabbitMq\Connection::getProducer('rabbitQueueCheck')

	-
		class: Pd\Monitoring\Check\Commands\Publish\HttpStatusCodeChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @Kdyby\RabbitMq\Connection::getProducer('httpStatusCodeCheck')

	-
		class: Pd\Monitoring\Check\Commands\Publish\NumberValueChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @Kdyby\RabbitMq\Connection::getProducer('numberValueCheck')

	-
		factory: \Pd\Monitoring\Check\Commands\Publish\ErrorsChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @\Kdyby\RabbitMq\Connection::getProducer('errorsCheck')

	-
		factory: \Pd\Monitoring\Check\Commands\Publish\XpathChecksCommand
		tags:
			- kdyby.console.command
		arguments:
			- @\Kdyby\RabbitMq\Connection::getProducer('xpathCheck')

	-
		factory: \Pd\Monitoring\Check\Commands\Publish\XpathChecksSiteMapCommand
		tags:
			- kdyby.console.command
		arguments:
			- @\Kdyby\RabbitMq\Connection::getProducer('xpathCheckSiteMap')

	-
		implement: Pd\Monitoring\DashBoard\Controls\Refresh\IFactory

	-
		implement: Pd\Monitoring\DashBoard\Controls\LastRefresh\IFactory

	-
		class: Pd\Monitoring\Check\Commands\SlackCheckStatusesCommand
		tags:
			- kdyby.console.command

	-
		implement: Pd\Monitoring\DashBoard\Controls\Maintenance\IFactory

	-
		class: Pd\Monitoring\Slack\Notifier
		arguments:
			hookUrl: %slack.hookUrl%

	-
		implement: Pd\Monitoring\DashBoard\Controls\ProjectChecks\IFactory
		arguments:
			user: @\Nette\Security\User::getIdentity()

	-
		implement: Pd\Monitoring\DashBoard\Controls\EditUser\IFactory

	-
		class: Pd\Monitoring\DashBoard\Forms\UserEditFormFactory

	-
		implement: Pd\Monitoring\DashBoard\Controls\Settings\IFactory

	-
		implement: Pd\Monitoring\DashBoard\Controls\UserList\IFactory

	-
		class: Pd\Monitoring\DashBoard\Controls\DataGridFactory

	-
		implement: Pd\Monitoring\DashBoard\Controls\Favicons\IFactory

	-
		implement: Pd\Monitoring\DashBoard\Controls\ProjectButtons\IFactory

	-
		factory: \Pd\Monitoring\Elasticsearch\ChecksExporter
		arguments:
			producer: @Kdyby\RabbitMq\Connection::getProducer('elasticsearchExport')

	orm.repositories.checks:
		setup:
			- "$service->onFlush[] = ?" ([@\Pd\Monitoring\Elasticsearch\ChecksExporter, export])

	-
		factory: \Pd\Monitoring\Elasticsearch\Consumers\ChecksExporter
		arguments:
			elasticsearchClient: @elasticsearchClient

	-
		factory: \Pd\Monitoring\Elasticsearch\Queries\AverageTimeoutQuery
		arguments:
			elasticsearchClient: @elasticsearchClient

	elasticsearchClient:
		class: \Elasticsearch\Client
		factory: \Pd\Monitoring\Elasticsearch\ClientFactory::create()
		arguments:
			hosts: %elasticsearch.hosts%

	-
		implement: \Pd\Monitoring\DashBoard\Controls\AliveChart\IFactory
		arguments:
			cache: \Nette\Caching\Cache()

	-
		class: \League\OAuth2\Client\Provider\Github
		factory: \Pd\Monitoring\Github\ProviderFactory(%github.clientId%, %github.clientSecret%, %github.scope%)::create()

	-
		factory: \Pd\MonologModule\Handlers\DayFileHandler
		arguments:
			appName: monitoring
			logDir: %logDir%

	-
		factory: \Pd\MonologModule\Handlers\BlueScreenHandler
		arguments:
			logDir: %logDir%

	-
		factory: \Monolog\Processor\WebProcessor

	-
		factory: \Monolog\Handler\ElasticsearchHandler
		arguments:
			client: @\Elasticsearch\Client
			options:
				index: %monologIndex%


	pd.monolog.logger:
		setup:
			- pushProcessor(@\Monolog\Processor\WebProcessor)
			- pushHandler(@\Pd\MonologModule\Handlers\BlueScreenHandler)

	-
		factory: \Pd\Monitoring\DashBoard\Controls\LogView\Factory

	-
		implement: \Pd\Monitoring\DashBoard\Controls\SubProjects\IFactory

	-
		implement: \Pd\Monitoring\DashBoard\Controls\ProjectChecksTabs\IFactory


decorator:
	Nette\Application\UI\Control:
		inject: on
